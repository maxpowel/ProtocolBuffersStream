
#include <Arduino.h>

#include "ProtocolBuffersStream.h"

size_t ProtocolBuffersStream::dataAvailable;

ProtocolBuffersStream::ProtocolBuffersStream(Stream *stream){
  stream_ = stream;
}


/**
 * Just read from serial and send it to pb library
 */
bool ProtocolBuffersStream::callbackRead(pb_istream_t *stream, uint8_t *buf, size_t count)
{
  if(ProtocolBuffersStream::dataAvailable <= 0){
    stream->bytes_left = 0;
    return true;
  }
  Stream *mstream = (Stream *)stream->state;
  size_t totalRead = mstream->readBytes(buf, count);
  ProtocolBuffersStream::dataAvailable -= totalRead;

  return totalRead == count;
}

/**
 * Waits for a first byte which contains the payload size
 */
bool ProtocolBuffersStream::receive(const pb_field_t fields[], void *dest_struct){

  while (!stream_->available());
  size_t messageSize = stream_->read();
  ProtocolBuffersStream::dataAvailable = messageSize;
  pb_istream_t pb_istream_ = {&callbackRead, stream_, SIZE_MAX};
  bool status = pb_decode(&pb_istream_, fields, dest_struct);
  if(!status) {
    Serial.println(PB_GET_ERROR(&pb_istream_));
  }

  return status;
}

/**
 * Write the generated bytes from pb library to the output stream
 */
bool ProtocolBuffersStream::callbackWrite(pb_ostream_t *stream, const uint8_t *buf, size_t count)
{
  Stream *mstream = (Stream *)stream->state;
  return mstream->write(buf, count) == count;
}

/**
 * Get the payload size send it and encode payload
 */
bool ProtocolBuffersStream::send(const pb_field_t fields[], const void *src_struct){

  pb_ostream_t sizestream = {0};
  pb_encode(&sizestream, fields, src_struct);
  Serial.write(sizestream.bytes_written);
  pb_ostream_t pb_stream_ = {&ProtocolBuffersStream::callbackWrite, stream_, SIZE_MAX, 0};


  return pb_encode(&pb_stream_, fields, src_struct);

}
