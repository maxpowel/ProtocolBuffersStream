
#include <Arduino.h>

#include "ProtocolBuffersStream.h"

size_t ProtocolBuffersStream::dataAvailable;

ProtocolBuffersStream::ProtocolBuffersStream(Stream *stream, unsigned int timeout){
  stream_ = stream;
  setTimeout(timeout);
}

void ProtocolBuffersStream::flush() {
  stream_->flush();
}

void ProtocolBuffersStream::setTimeout(unsigned int timeout) {
  timeout_ = timeout;
  stream_->setTimeout(timeout);
}

/**
 * Just read from serial and send it to pb library
 */
bool ProtocolBuffersStream::callbackRead(pb_istream_t *stream, uint8_t *buf, size_t count)
{

Stream *mstream = (Stream *)stream->state;
  if(ProtocolBuffersStream::dataAvailable <= 0){
    stream->bytes_left = 0;
    return true;
  }

  size_t totalRead = mstream->readBytes(buf, count);
  ProtocolBuffersStream::dataAvailable -= totalRead;

  return totalRead == count;
}

/**
 * Waits for a first byte which contains the payload size
 */
bool ProtocolBuffersStream::receive(const pb_field_t fields[], void *dest_struct){
  char messageSize;
  size_t totalRead = stream_->readBytes(&messageSize, 1);
  // Serial.println("ESPERANDO MENSAJE DE TAM");
  // Serial.println((int)messageSize);
  if(totalRead == 1) {
    //while (!stream_->available());
    //size_t messageSize = stream_->read();
    ProtocolBuffersStream::dataAvailable = messageSize;
    pb_istream_t pb_istream_ = {&callbackRead, stream_, (size_t)messageSize};
    bool status = pb_decode(&pb_istream_, fields, dest_struct);
    //bool status = true;
    /*if(!status) {
      Serial.println(PB_GET_ERROR(&pb_istream_));
    }*/

    return status;
  } else {
    return false;
  }
}

/**
 * Write the generated bytes from pb library to the output stream
 */
bool ProtocolBuffersStream::callbackWrite(pb_ostream_t *stream, const uint8_t *buf, size_t count)
{
  Stream *mstream = (Stream *)stream->state;
  return mstream->write(buf, count) == count;
}

/**
 * Get the payload size send it and encode payload
 */
bool ProtocolBuffersStream::send(const pb_field_t fields[], const void *src_struct){
  size_t payloadSize;
  pb_get_encoded_size(&payloadSize, fields, src_struct);
  stream_->write(payloadSize);
  pb_ostream_t pb_stream = {&ProtocolBuffersStream::callbackWrite, stream_, payloadSize, 0};
  return pb_encode(&pb_stream, fields, src_struct);


}
